# ai_recruitment_platform/config/settings.py

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os # Needed for BASE_DIR

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is defined as the directory containing this file (the config directory).
# We need to go up one level to get to the project's root directory.
BASE_DIR = Path(__file__).resolve().parent.parent # This will point to ai_recruitment_platform/


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-will-be-generated-here' # Replace with a real key when deploying

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Set to False for production

ALLOWED_HOSTS = [] # Add your domain names here for production

# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # --- Our Custom Apps ---
    'users',
    'jobs',
    'candidates',
    'applications',

    # We'll add DRF, allauth, etc. later
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls' # Points to our project's main urls.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Look for templates in a top-level 'templates' folder
        'APP_DIRS': True, # Look for templates inside each app's 'templates' sub-directory
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Add context processors for allauth if used later
                # 'allauth.account.context_processors.account',
                # 'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# --- Database ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # SQLite database file
    }
}

# For Production, you'll switch to PostgreSQL. Here's a placeholder:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'your_db_name',
#         'USER': 'your_db_user',
#         'PASSWORD': 'your_db_password',
#         'HOST': 'your_db_host', # e.g., 'localhost' or a cloud DB endpoint
#         'PORT': '5432',
#     }
# }


# --- Password validation ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC' # Consider changing to your local timezone, e.g., 'America/New_York'

USE_I18N = True

USE_TZ = True


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Configure where Django should look for static files in development
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# In production, you'll use collectstatic, which gathers all static files
# into a single directory defined by STATIC_ROOT.
# STATIC_ROOT = BASE_DIR / 'staticfiles'


# --- Media files (User Uploads like resumes) ---
# https://docs.djangoproject.com/en/5.0/topics/files/

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media' # Directory to store uploaded files


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Custom User Model ---
# We will configure this later when we create the users app and UserProfile model
# AUTH_USER_MODEL = 'users.UserProfile' # Example if UserProfile *was* the user model

# --- Email Settings (Placeholder) ---
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_email_password'
# DEFAULT_FROM_EMAIL = 'Your Company <noreply@yourcompany.com>'


# --- Logging ---
# Basic logging setup for development can be useful for debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Can be set to DEBUG for more verbosity
    },
}