"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # This will point to ai_recruitment_platform/


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-will-be-generated-here' # Replace with a real key when deploying

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Set to False for production

ALLOWED_HOSTS = [] # Add your domain names here for production

# --- Application definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # --- Third-party apps ---
    'allauth',              # Core allauth
    'allauth.account',      # Needed for the account management
    'allauth.socialaccount', # Needed for social accounts (optional for now)
    # 'allauth.socialaccount.providers.google', # Example for Google login

    # --- Our Custom Apps ---
    'users',
    'jobs',
    'candidates',
    'applications',
]

SITE_ID = 1 # Required by allauth

# Email backend for account verification, password reset, etc.
# We'll use Django's console backend for local development.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'satyampote9999@gmail.com'


ACCOUNT_EMAIL_REQUIRED = True # Require users to have an email address
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # 'none', 'optional', 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False # We don't need a separate username field if we use email as identifier
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Login using email instead of username
ACCOUNT_UNIQUE_EMAIL = True # Ensure emails are unique

# Redirect URLs after login/logout
LOGIN_REDIRECT_URL = '/' # Redirect to homepage after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/' # Redirect to homepage after logout

# --- Middleware ---
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # --- Add allauth middleware ---
    'allauth.account.middleware.AccountMiddleware', # THIS MUST BE PRESENT
]

# --- TEMPLATES Configuration ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Look for templates in a top-level 'templates' folder
        'APP_DIRS': True, # IMPORTANT: This tells Django to look for templates and context processors inside each app's 'templates' directory.
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request', # Necessary for allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # IMPORTANT: REMOVE THESE LINES that caused the ModuleNotFoundError
                # 'allauth.account.context_processors.account',
                # 'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

ROOT_URLCONF = 'config.urls' # Points to our project's main urls.py

WSGI_APPLICATION = 'config.wsgi.application'


# --- Database ---
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # SQLite database file
    }
}

# --- Password validation ---
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internationalization ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# --- Static files (CSS, JavaScript, Images) ---
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# --- Media files (User Uploads like resumes) ---
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Logging ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}